import discord
from aiohttp import web
import logging
import json
import io
from Main.database import add_to_history
from Main.utils import load_json
from Main.custom_commands.views import ImageControlView

logger = logging.getLogger(__name__)

async def handle_generated_image(request):
    try:
        logger.debug("Received request to handle_generated_image")
        reader = await request.multipart()
        request_id = None
        user_id = None
        channel_id = None
        interaction_id = None
        original_message_id = None
        prompt = None
        resolution = None
        upscaled_resolution = None
        loras = None
        upscale_factor = None
        seed = None
        image_data = None

        async for part in reader:
            if part.name == 'request_id':
                request_id = await part.text()
            elif part.name == 'user_id':
                user_id = await part.text()
            elif part.name == 'channel_id':
                channel_id = await part.text()
            elif part.name == 'interaction_id':
                interaction_id = await part.text()
            elif part.name == 'original_message_id':
                original_message_id = await part.text()
            elif part.name == 'prompt':
                prompt = await part.text()
            elif part.name == 'resolution':
                resolution = await part.text()
            elif part.name == 'upscaled_resolution':
                upscaled_resolution = await part.text()
            elif part.name == 'loras':
                loras = json.loads(await part.text())
            elif part.name == 'upscale_factor':
                upscale_factor = int(await part.text())
            elif part.name == 'seed':
                seed = await part.text()
            elif part.name == 'image_data':
                image_data = await part.read(decode=False)

        if all([request_id, user_id, image_data, channel_id, interaction_id, original_message_id, prompt, resolution, loras is not None, upscale_factor is not None, seed]):
            if request_id not in request.app['bot'].pending_requests:
                logger.warning(f"Received response for unknown request_id: {request_id}")
                return web.Response(text="Unknown request", status=404)

            del request.app['bot'].pending_requests[request_id]
            image_filename = f'generated_image_{request_id}.png'

            user = await request.app['bot'].fetch_user(int(user_id))
            user_name = user.display_name if user else "Unknown User"

            channel = await request.app['bot'].fetch_channel(int(channel_id))
            guild = channel.guild
            member = await guild.fetch_member(int(user_id))
            user_color = member.color.value if member.color.value != 0 else 0x5DADEC

            lora_config = load_json('lora.json')
            lora_names = [next((lora['name'] for lora in lora_config['available_loras'] if lora['file'] == lora_file), lora_file) for lora_file in loras]

            embed = discord.Embed(title=f"Image generated by {user_name}", description=prompt, color=user_color)
            if upscaled_resolution and upscaled_resolution != "Unknown":
                embed.add_field(name="Resolution", value=f"{resolution} â†’ {upscaled_resolution}", inline=True)
            else:
                embed.add_field(name="Resolution", value=resolution, inline=True)
            embed.add_field(name="LoRAs", value=", ".join(lora_names) if lora_names else "None", inline=True)
            embed.add_field(name="Upscale Factor", value=str(upscale_factor), inline=True)
            embed.add_field(name="Seed", value=seed, inline=True)

            image_file = discord.File(io.BytesIO(image_data), image_filename)
            view = ImageControlView(request.app['bot'], prompt, image_filename, resolution, loras, upscale_factor, seed)

            try:
                channel = await request.app['bot'].fetch_channel(int(channel_id))
                original_message = await channel.fetch_message(int(original_message_id))
                await original_message.edit(content=None, embed=embed, attachments=[image_file], view=view)
                request.app['bot'].add_view(view, message_id=original_message.id)
            except discord.errors.NotFound:
                logger.warning(f"Channel {channel_id} or message {original_message_id} not found")
            except discord.errors.Forbidden:
                logger.warning(f"Bot doesn't have permission to send messages in channel {channel_id}")
            except Exception as e:
                logger.error(f"Error sending image to channel {channel_id}: {str(e)}")

            add_to_history(user_id, prompt, None, image_filename, resolution, loras, upscale_factor)
            
            logger.info(f"Image sent to channel for user {user_id}")
            return web.Response(text="Image sent to channel.")
        else:
            missing_fields = [field for field in ['request_id', 'user_id', 'channel_id', 'interaction_id', 
                                                'original_message_id', 'prompt', 'resolution', 'loras', 
                                                'upscale_factor', 'seed', 'image_data'] 
                            if locals().get(field) is None]
            logger.warning(f"Missing fields: {', '.join(missing_fields)}")
            return web.Response(text="Missing required data.", status=400)
    
    except Exception as e:
        logger.error(f"Error in handle_generated_image: {str(e)}", exc_info=True)
        return web.Response(text="Internal server error", status=500)